//Approach 1 Using Reverse fxn
class Solution {
public:
    string reverseWords(string s) {
        int n=s.size();
        string ans="";
        reverse(s.begin(),s.end());
        for(int i=0;i<n;i++){
        //First we reverse using the reverse so we get reverse of whole string
        string word="";
        //Now we take one by one char to make it as a word 

        while(i<n && s[i]!=' '){
            word+=s[i];
            i++;
        }
        //Now We get  one word from reverse char like pen ka nep so we again reverse it 
        reverse(word.begin(),word.end());
        if(word.length()>0)
        ans+=" "+word;
        }
        return ans.substr(1);
    }
};
--------------------------------------------------------Approach 2-------------------------------------------------------------------
class Solution {
public:
    //bY Tokenization
    string reverseWords(string s) {
        stringstream ss(s);
        string token="";
        string result="";
        //automatically piche se add karega
        while(ss>>token){
            result=token+" "+result;
        }
        return result.substr(0,result.length()-1);
    }
};
--------------------------------------------------------Approach 3-----------------------------------------------------------------------
class Solution {
public:
    string reverseWords(string s) {
        //first we reverse it 
        reverse(begin(s),end(s));
        int i=0;
        int l=0,r=0;
        int n=s.length();
        while(i<n)
        {
            while(i<n && s[i]!=' '){
                s[r++]=s[i++];
            }
            if(l<r){
                reverse(s.begin()+l,s.begin()+r);
                s[r]=' ';
                r++;
                l=r;
            }
            i++;
        }
        return s.substr(0,r-1);
    }
};
